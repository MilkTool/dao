
class UserKey
{
    var value = 0
    routine (int)(){
		io.writeln( 'Calling UserKey::(int)()', value )
        return value
    }
    routine (string)(){
		io.writeln( 'Calling UserKey::(string)()', value )
        return (string)value
    }
	routine (int)( mode: enum<hashkey> ){
		io.writeln( 'Calling UserKey::(int)(mode:enum<hashkey>)', value )
        return value
	}
}

var table = { UserKey.{0} -> 0 }
var dt1 = UserKey.{ 123 }
var dt2 = UserKey.{ 456 }
var dt3 = UserKey.{ 123 }

# Call UserKey.signature() and use the signature to hash and compare:
table[ dt1 ] = 1
table[ dt2 ] = 1

io.writeln( table.find( dt3 ) != none )  # true
io.writeln( dt2 in table ); # true

dt3.value += 100
#io.writeln( table.find( dt3 ) != none )  # error, object has been changed!


dt1.value += 100
io.writeln( table.find( UserKey.{123} ) != none )  # error, object has been changed!
