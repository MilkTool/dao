load CharType;




var mbs_alnum = ""
var mbs_alnum_neg = ""

for( ch = 1 : 127 ){
	if( isalnum( ch ) ){
		mbs_alnum += string(1,ch)
	}else{
		mbs_alnum_neg += string(1,ch)
	}
}

@[test()]
m1 = mbs_alnum.match( "[%a%d]+" )
m2 = mbs_alnum_neg.match( "[^%a%d]+" )
res = ( m1.start, m1.end, m2.start, m2.end )
@[test()]
@[test()]
( 0, mbs_alnum.size(), 0, mbs_alnum_neg.size() )
@[test()]



var mbs_alpha = ""
var mbs_alpha_neg = ""

for( ch = 1 : 127 ){
	if( isalpha( ch ) ){
		mbs_alpha += string(1,ch)
	}else{
		mbs_alpha_neg += string(1,ch)
	}
}

@[test()]
m1 = mbs_alpha.match( "%a+" )
m2 = mbs_alpha_neg.match( "%A+" )
res = ( m1.start, m1.end, m2.start, m2.end )
@[test()]
@[test()]
( 0, mbs_alpha.size(), 0, mbs_alpha_neg.size() )
@[test()]



var mbs_blank = ""
var mbs_blank_neg = ""

for( ch = 1 : 127 ){
	if( isblank( ch ) ){
		mbs_blank += string(1,ch)
	}else{
		mbs_blank_neg += string(1,ch)
	}
}

@[test()]
m1 = mbs_blank.match( "[ \t]+" )
m2 = mbs_blank_neg.match( "[^ \t]+" )
res = ( m1.start, m1.end, m2.start, m2.end )
@[test()]
@[test()]
( 0, mbs_blank.size(), 0, mbs_blank_neg.size() )
@[test()]



var mbs_cntrl = ""
var mbs_cntrl_neg = ""

for( ch = 1 : 127 ){
	if( iscntrl( ch ) ){
		mbs_cntrl += string(1,ch)
	}else{
		mbs_cntrl_neg += string(1,ch)
	}
}

@[test()]
m1 = mbs_cntrl.match( "%k+" )
m2 = mbs_cntrl_neg.match( "%K+" )
res = ( m1.start, m1.end, m2.start, m2.end )
@[test()]
@[test()]
( 0, mbs_cntrl.size(), 0, mbs_cntrl_neg.size() )
@[test()]



var mbs_digit = ""
var mbs_digit_neg = ""

for( ch = 1 : 127 ){
	if( isdigit( ch ) ){
		mbs_digit += string(1,ch)
	}else{
		mbs_digit_neg += string(1,ch)
	}
}

@[test()]
m1 = mbs_digit.match( "%d+" )
m2 = mbs_digit_neg.match( "%D+" )
res = ( m1.start, m1.end, m2.start, m2.end )
@[test()]
@[test()]
( 0, mbs_digit.size(), 0, mbs_digit_neg.size() )
@[test()]



var mbs_graph = ""
var mbs_graph_neg = ""

for( ch = 1 : 127 ){
	if( isgraph( ch ) ){
		mbs_graph += string(1,ch)
	}else{
		mbs_graph_neg += string(1,ch)
	}
}

@[test()]
m1 = mbs_graph.match( ".+" )
m2 = mbs_graph_neg.match( ".+" )
res = ( m1.start, m1.end, m2.start, m2.end )
@[test()]
@[test()]
( 0, mbs_graph.size(), 0, mbs_graph_neg.size() )
@[test()]



var mbs_lower = ""
var mbs_lower_neg = ""

for( ch = 1 : 127 ){
	if( islower( ch ) ){
		mbs_lower += string(1,ch)
	}else{
		mbs_lower_neg += string(1,ch)
	}
}

@[test()]
m1 = mbs_lower.match( "%c+" )
m2 = mbs_lower_neg.match( "[^%c]+" )
res = ( m1.start, m1.end, m2.start, m2.end )
@[test()]
@[test()]
( 0, mbs_lower.size(), 0, mbs_lower_neg.size() )
@[test()]



var mbs_print = ""
var mbs_print_neg = ""

for( ch = 1 : 127 ){
	if( isprint( ch ) ){
		mbs_print += string(1,ch)
	}else{
		mbs_print_neg += string(1,ch)
	}
}

@[test()]
m1 = mbs_print.match( ".+" )
m2 = mbs_print_neg.match( ".+" )
res = ( m1.start, m1.end, m2.start, m2.end )
@[test()]
@[test()]
( 0, mbs_print.size(), 0, mbs_print_neg.size() )
@[test()]



var mbs_punct = ""
var mbs_punct_neg = ""

for( ch = 1 : 127 ){
	if( ispunct( ch ) ){
		mbs_punct += string(1,ch)
	}else{
		mbs_punct_neg += string(1,ch)
	}
}

@[test()]
m1 = mbs_punct.match( "%p+" )
m2 = mbs_punct_neg.match( "%P+" )
res = ( m1.start, m1.end, m2.start, m2.end )
@[test()]
@[test()]
( 0, mbs_punct.size(), 0, mbs_punct_neg.size() )
@[test()]



var mbs_space = ""
var mbs_space_neg = ""

for( ch = 1 : 127 ){
	if( isspace( ch ) ){
		mbs_space += string(1,ch)
	}else{
		mbs_space_neg += string(1,ch)
	}
}

@[test()]
m1 = mbs_space.match( "%s+" )
m2 = mbs_space_neg.match( "%S+" )
res = ( m1.start, m1.end, m2.start, m2.end )
@[test()]
@[test()]
( 0, mbs_space.size(), 0, mbs_space_neg.size() )
@[test()]



var mbs_upper = ""
var mbs_upper_neg = ""

for( ch = 1 : 127 ){
	if( isupper( ch ) ){
		mbs_upper += string(1,ch)
	}else{
		mbs_upper_neg += string(1,ch)
	}
}

@[test()]
m1 = mbs_upper.match( "%C+" )
m2 = mbs_upper_neg.match( "[^%C]+" )
res = ( m1.start, m1.end, m2.start, m2.end )
@[test()]
@[test()]
( 0, mbs_upper.size(), 0, mbs_upper_neg.size() )
@[test()]



var mbs_xdigit = ""
var mbs_xdigit_neg = ""

for( ch = 1 : 127 ){
	if( isxdigit( ch ) ){
		mbs_xdigit += string(1,ch)
	}else{
		mbs_xdigit_neg += string(1,ch)
	}
}

@[test()]
m1 = mbs_xdigit.match( "%x+" )
m2 = mbs_xdigit_neg.match( "%X+" )
res = ( m1.start, m1.end, m2.start, m2.end )
@[test()]
@[test()]
( 0, mbs_xdigit.size(), 0, mbs_xdigit_neg.size() )
@[test()]



var mbs_ascii = ""

for( ch = 1 : 127 ){
	if( isascii( ch ) ) mbs_ascii += string(1,ch)
}

@[test()]
m1 = mbs_ascii.match( ".+" )
res = ( m1.start, m1.end )
@[test()]
@[test()]
( 0, mbs_ascii.size() )
@[test()]



